from fastapi import APIRouter, Request
from loguru import logger
from services import send_report

router = APIRouter()

@router.post("/webhook/register_folder")
async def register_folder(request: Request):
    try:
        data = await request.json()
        deal_id = data.get("deal_id")
        folder_id = data.get("folder_id")

        if not deal_id or not folder_id:
            logger.warning(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ webhook: {data}")
            return {"status": "error", "message": "Missing deal_id or folder_id"}

        logger.info(f"üì¨ –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω: deal_id={deal_id}, folder_id={folder_id}")
        await send_report(deal_id, folder_id)
        return {"status": "ok"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)}


@router.post("/webhook/deal_update")
async def deal_update(request: Request):
    try:
        body = await request.body()
        logger.warning(f"üêû [deal_update] –°—ã—Ä–æ–π payload: {body}")

        data = await request.json()
        deal_id = data.get("deal_id")
        folder_id = data.get("folder_id")

        if not deal_id or not folder_id:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ deal_update: {data}")
            return {"status": "ignored"}

        logger.info(f"üì¨ deal_update ‚Üí proxy: deal_id={deal_id}, folder_id={folder_id}")
        await send_report(deal_id, folder_id)
        return {"status": "ok"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /deal_update: {e}")
        return {"status": "error", "message": str(e)}