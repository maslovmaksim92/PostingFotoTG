from fastapi import APIRouter, Request
from loguru import logger
from bitrix import get_deal_fields, attach_photos_if_cleaning_done
from services import upload_folder_to_deal

router = APIRouter()

last_processed = {}

@router.post("/webhook/deal_update")
async def deal_update(request: Request):
    data = await request.form()
    logger.warning("üêû [deal_update] –°—ã—Ä–æ–π payload: {}", dict(data))

    deal_id = data.get("data[FIELDS][ID]")
    if not deal_id:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç deal_id –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞")
        return {"status": "error", "message": "No deal_id"}

    # –ê–Ω—Ç–∏—Å–ø–∞–º (30 —Å–µ–∫—É–Ω–¥)
    import time
    now = time.time()
    if deal_id in last_processed and now - last_processed[deal_id] < 30:
        logger.warning("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è {} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", deal_id)
        return {"status": "skipped", "reason": "too frequent"}

    last_processed[deal_id] = now

    try:
        fields = get_deal_fields(deal_id)
        logger.info("üìã –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ {}: {}", deal_id, fields)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π —Å–¥–µ–ª–∫–∏ {}: {}", deal_id, e)
        return {"status": "error", "message": f"Failed to fetch deal fields: {str(e)}"}

    folder_id = fields.get("UF_CRM_1743273170850")
    if not folder_id:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–∞–ø–∫–∏ —É —Å–¥–µ–ª–∫–∏ {} (UF_CRM_1743273170850)", deal_id)
        return {"status": "error", "message": "No folder_id in deal"}

    logger.info("üì¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞–ø–∫–∞ {} —É —Å–¥–µ–ª–∫–∏ {}", folder_id, deal_id)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –≤ —Å–¥–µ–ª–∫—É
        upload_folder_to_deal(deal_id=int(deal_id), folder_id=int(folder_id))
        logger.success("‚úÖ –§–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–¥–µ–ª–∫—É {}", folder_id, deal_id)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ upload_folder_to_deal –¥–ª—è —Å–¥–µ–ª–∫–∏ {}: {}", deal_id, e)
        return {"status": "error", "message": str(e)}

    try:
        # –ù–æ–≤—ã–π —à–∞–≥: –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ —Å—Ç–∞–¥–∏–∏ '—É–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–¥–∏–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ {}", deal_id)
        await attach_photos_if_cleaning_done(int(deal_id))
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ attach_photos_if_cleaning_done –¥–ª—è —Å–¥–µ–ª–∫–∏ {}: {}", deal_id, e)
        return {"status": "error", "message": f"Failed to attach photos: {str(e)}"}

    return {"status": "ok", "deal_id": deal_id}