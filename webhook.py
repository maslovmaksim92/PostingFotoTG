from fastapi import APIRouter, Request
from loguru import logger
from bitrix import get_deal_fields, attach_photos_if_cleaning_done
from services import upload_folder_to_deal

router = APIRouter()

last_processed = {}

@router.post("/webhook/deal_update")
async def deal_update(request: Request):
    try:
        data = await request.form()
        logger.warning("üêû [deal_update] –°—ã—Ä–æ–π payload: {}", dict(data))

        deal_id = data.get("data[FIELDS][ID]")
        if not deal_id:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç deal_id")
            return {"status": "error", "message": "No deal_id"}

        # –ê–Ω—Ç–∏—Å–ø–∞–º (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É)
        import time
        now = time.time()
        if deal_id in last_processed and now - last_processed[deal_id] < 30:
            logger.warning("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", deal_id)
            return {"status": "skipped", "reason": "too frequent"}

        last_processed[deal_id] = now

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        fields = get_deal_fields(deal_id)
        logger.debug("üìã –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ {}: {}", deal_id, fields)

        folder_id = fields.get("UF_CRM_1743273170850")
        logger.info("üì¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞–ø–∫–∞: deal_id={}, folder_id={}", deal_id, folder_id)

        if not folder_id:
            logger.error("‚ùó –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–∞–ø–∫–∏ —É —Å–¥–µ–ª–∫–∏ {}", deal_id)
            return {"status": "error", "message": "No folder_id in deal"}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –≤ —Å–¥–µ–ª–∫—É
        upload_folder_to_deal(deal_id=int(deal_id), folder_id=int(folder_id))
        logger.success("‚úÖ –§–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ {} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {}", folder_id, deal_id)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —Å—Ç–∞–¥–∏—è = "—É–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —á–µ—Ä–µ–∑ Bitrix upload
        try:
            logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–¥–∏—é —Å–¥–µ–ª–∫–∏ {} –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ", deal_id)
            await attach_photos_if_cleaning_done(int(deal_id))
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ attach_photos_if_cleaning_done: {}", e)

        return {"status": "ok", "deal_id": deal_id}

    except Exception as e:
        logger.exception("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ /deal_update")
        return {"status": "error", "message": str(e)}}