# ... (–∏–º–ø–æ—Ä—Ç –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def attach_media_to_deal(deal_id: int, media_group: list[dict], folder_id: int) -> None:
    bind_url = f"{BITRIX_WEBHOOK}/crm.deal.update"
    field_code = "UF_CRM_1740994275251"

    file_ids = [f["id"] for f in media_group if f.get("id")]

    if not file_ids:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç ID —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (media_group –ø—É—Å—Ç–æ–π –∏–ª–∏ –±–µ–∑ ID)")
        return

    try:
        bind_payload = {
            "id": deal_id,
            "fields": {
                field_code: file_ids
            }
        }
        logger.debug(f"‚û°Ô∏è CRM PAYLOAD (getchildren): {bind_payload}")
        async with httpx.AsyncClient() as client:
            update_resp = await client.post(bind_url, json=bind_payload)
            update_resp.raise_for_status()
            result = update_resp.json()
            logger.debug(f"üì® –û—Ç–≤–µ—Ç –æ—Ç Bitrix: {result}")
            if result.get("result") is True:
                logger.info(f"üìé –§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {file_ids}")
            else:
                logger.warning(f"‚ö†Ô∏è Bitrix –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ {deal_id}: {result}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ (getchildren): {e}")