import os
import logging
from flask import Flask, request, jsonify, redirect
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
from urllib.parse import urlparse

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
file_handler = logging.FileHandler(os.path.join(LOG_DIR, "app.log"), encoding="utf-8")
file_handler.setFormatter(log_formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logging.basicConfig(level=logging.DEBUG, handlers=[file_handler, console_handler])

# ‚úÖ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
load_dotenv()

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL", "").strip()
BITRIX_DEAL_UPDATE_URL = os.getenv("BITRIX_DEAL_UPDATE_URL", "").strip()
BASIC_AUTH_LOGIN = os.getenv("BASIC_AUTH_LOGIN", "").strip()
BASIC_AUTH_PASSWORD = os.getenv("BASIC_AUTH_PASSWORD", "").strip()
CUSTOM_FILE_FIELD = os.getenv("CUSTOM_FILE_FIELD", "UF_CRM_1740994275251")

BITRIX_CLIENT_ID = os.getenv("BITRIX_CLIENT_ID")
BITRIX_CLIENT_SECRET = os.getenv("BITRIX_CLIENT_SECRET")
BITRIX_REDIRECT_URI = os.getenv("BITRIX_REDIRECT_URI")

@app.route("/", methods=["GET"])
def index():
    return "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200


# ‚úÖ OAuth –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Bitrix
@app.route("/auth/bitrix")
def auth_bitrix():
    auth_url = f"https://oauth.bitrix.info/oauth/authorize/?client_id={BITRIX_CLIENT_ID}&response_type=code&redirect_uri={BITRIX_REDIRECT_URI}"
    return redirect(auth_url)


@app.route("/oauth/callback")
def oauth_callback():
    auth_code = request.args.get("code")
    if not auth_code:
        logging.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return jsonify({"status": "error", "message": "Authorization code missing"}), 400

    try:
        token_url = "https://oauth.bitrix.info/oauth/token/"
        payload = {
            "grant_type": "authorization_code",
            "client_id": BITRIX_CLIENT_ID,
            "client_secret": BITRIX_CLIENT_SECRET,
            "code": auth_code,
            "redirect_uri": BITRIX_REDIRECT_URI
        }
        response = requests.post(token_url, data=payload)
        if response.status_code != 200:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.text}")
            return jsonify({"status": "error", "message": "Token exchange failed"}), 400

        token_data = response.json()
        logging.info("‚úÖ OAuth —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
        return jsonify({
            "status": "success",
            "access_token": token_data.get("access_token"),
            "refresh_token": token_data.get("refresh_token"),
            "member_id": token_data.get("member_id")
        })
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –≤ OAuth callback")
        return jsonify({"status": "error", "message": str(e)}), 500


# ‚úÖ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
def get_folder_id_from_deal(deal_id: str, field_code: str) -> str:
    try:
        url = f"{BITRIX_WEBHOOK_URL}crm.deal.get"
        resp = requests.post(url, json={"id": deal_id})
        data = resp.json()
        logging.debug(f"üì• –û—Ç–≤–µ—Ç crm.deal.get: {data}")

        if not data.get("result"):
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫—É ID {deal_id}")
            return None

        value = data["result"].get(field_code)
        logging.info(f"üì¶ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {field_code} –≤ —Å–¥–µ–ª–∫–µ: {value}")

        if value and str(value).isdigit():
            return value
        logging.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {field_code} –Ω–µ ObjectId")
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è folder_id –∏–∑ —Å–¥–µ–ª–∫–∏")
    return None


def download_file(url: str):
    logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
    try:
        r = requests.get(url, auth=HTTPBasicAuth(BASIC_AUTH_LOGIN, BASIC_AUTH_PASSWORD), timeout=10)
        if r.status_code == 200:
            return r.content
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: –∫–æ–¥ {r.status_code}")
    except Exception as ex:
        logging.exception("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    return None


def upload_file_to_bitrix(file_content: bytes, file_name: str, storage_id: int = 3):
    try:
        upload_url = f"{BITRIX_WEBHOOK_URL}disk.storage.uploadfile"
        files = {
            "id": (None, str(storage_id)),
            "fileContent": (file_name, file_content),
        }
        resp = requests.post(upload_url, files=files, timeout=10)
        data = resp.json()
        logging.debug(f"üì§ –û—Ç–≤–µ—Ç disk.storage.uploadfile: {data}")
        return data.get("result", {}).get("ID")
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Bitrix")
    return None


def attach_files_to_deal(deal_id: str, file_ids: list):
    try:
        payload = {"id": deal_id, "fields": {CUSTOM_FILE_FIELD: file_ids}}
        resp = requests.post(BITRIX_DEAL_UPDATE_URL, json=payload, timeout=10)
        data = resp.json()
        logging.debug(f"üìé –û—Ç–≤–µ—Ç crm.deal.update: {data}")
        return data.get("result", False)
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
    return False


@app.route("/attach_files", methods=["POST"])
def attach_files():
    data = request.get_json(silent=True)
    if data is None:
        logging.error("‚ùå –ù–µ JSON: %s", request.data.decode("utf-8"))
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"}), 400

    deal_id = data.get("deal_id")
    folder_id = data.get("folder_id")

    logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: deal_id={deal_id}, folder_id={folder_id}")

    if not deal_id:
        return jsonify({"status": "error", "message": "deal_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    if not folder_id or not str(folder_id).isdigit():
        logging.info("üìå –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å folder_id —á–µ—Ä–µ–∑ —Å–¥–µ–ª–∫—É")
        folder_id = get_folder_id_from_deal(deal_id, "UF_CRM_1743235503935")

    if not folder_id:
        return jsonify({"status": "error", "message": "folder_id –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

    try:
        resp = requests.post(f"{BITRIX_WEBHOOK_URL}disk.folder.getchildren", json={"id": folder_id}, timeout=10)
        result_json = resp.json()
        files_info = [f for f in result_json.get("result", []) if f.get("TYPE") == 2]
        logging.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {len(files_info)}")
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"}), 500

    if not files_info:
        return jsonify({"status": "error", "message": "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"}), 404

    file_ids_for_deal = []
    for file_info in files_info:
        download_url = file_info.get("DOWNLOAD_URL")
        if not download_url:
            continue

        domain = urlparse(BITRIX_WEBHOOK_URL).netloc
        file_url = f"https://{domain}{download_url}"
        file_name = os.path.basename(urlparse(file_url).path)
        file_content = download_file(file_url)

        if file_content:
            file_id = upload_file_to_bitrix(file_content, file_name)
            if file_id:
                file_ids_for_deal.append(file_id)
                logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {file_name}, ID={file_id}")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_name}")

    if not file_ids_for_deal:
        return jsonify({"status": "error", "message": "–§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã"}), 500

    success = attach_files_to_deal(deal_id, file_ids_for_deal)
    logging.info(f"üìå –§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")

    return jsonify({
        "status": "ok" if success else "error",
        "deal_id": deal_id,
        "folder_id": folder_id,
        "files_attached": len(file_ids_for_deal),
        "attach_success": success
    }), 200 if success else 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000, debug=False)
