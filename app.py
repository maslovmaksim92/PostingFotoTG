import os
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
from urllib.parse import urlparse

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
file_handler = logging.FileHandler(os.path.join(LOG_DIR, "app.log"), encoding="utf-8")
file_handler.setFormatter(log_formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logging.basicConfig(level=logging.DEBUG, handlers=[file_handler, console_handler])

# ‚úÖ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
load_dotenv()

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL", "").strip()
BITRIX_DEAL_UPDATE_URL = os.getenv("BITRIX_DEAL_UPDATE_URL", "").strip()
BASIC_AUTH_LOGIN = os.getenv("BASIC_AUTH_LOGIN", "").strip()
BASIC_AUTH_PASSWORD = os.getenv("BASIC_AUTH_PASSWORD", "").strip()
CUSTOM_FILE_FIELD = os.getenv("CUSTOM_FILE_FIELD", "UF_CRM_1740994275251")

@app.route("/", methods=["GET"])
def index():
    return "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200

def get_folder_id_from_deal(deal_id: str, field_code: str) -> str:
    try:
        url = f"{BITRIX_WEBHOOK_URL}crm.deal.get"
        resp = requests.post(url, json={"id": deal_id})
        data = resp.json()
        logging.debug(f"üì• –û—Ç–≤–µ—Ç crm.deal.get: {data}")

        if not data.get("result"):
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫—É ID {deal_id}")
            return None

        value = data["result"].get(field_code)
        logging.info(f"üì¶ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {field_code} –≤ —Å–¥–µ–ª–∫–µ: {value}")

        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ ObjectId ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if value and value.isdigit():
            return value

        logging.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {field_code} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ObjectId")
        return None
    except Exception as e:
        logging.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ObjectId –ø–∞–ø–∫–∏ –∏–∑ —Å–¥–µ–ª–∫–∏: {e}")
        return None

def download_file(url: str):
    logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {url}")
    try:
        r = requests.get(url, auth=HTTPBasicAuth(BASIC_AUTH_LOGIN, BASIC_AUTH_PASSWORD))
        if r.status_code == 200:
            return r.content
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {r.status_code}")
    except Exception as ex:
        logging.exception(f"üî• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {ex}")
    return None

def upload_file_to_bitrix(file_content: bytes, file_name: str, storage_id: int = 3):
    try:
        upload_url = f"{BITRIX_WEBHOOK_URL}disk.storage.uploadfile"
        files = {
            "id": (None, str(storage_id)),
            "fileContent": (file_name, file_content),
        }
        resp = requests.post(upload_url, files=files)
        data = resp.json()
        logging.debug(f"üì§ –û—Ç–≤–µ—Ç disk.storage.uploadfile: {data}")
        return data.get("result", {}).get("ID")
    except Exception as e:
        logging.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    return None

def attach_files_to_deal(deal_id: str, file_ids: list):
    try:
        payload = {"id": deal_id, "fields": {CUSTOM_FILE_FIELD: file_ids}}
        resp = requests.post(BITRIX_DEAL_UPDATE_URL, json=payload)
        data = resp.json()
        logging.debug(f"üìé –û—Ç–≤–µ—Ç crm.deal.update: {data}")
        return data.get("result", False)
    except Exception as e:
        logging.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫ —Å–¥–µ–ª–∫–µ: {e}")
    return False

@app.route("/attach_files", methods=["POST"])
def attach_files():
    data = request.get_json(silent=True)
    if data is None:
        logging.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: %s", request.data.decode("utf-8"))
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"}), 400

    deal_id = data.get("deal_id")
    folder_id = data.get("folder_id")

    logging.info(f"üîç –ó–∞–ø—Ä–æ—Å: deal_id={deal_id}, folder_id={folder_id}")

    if not deal_id:
        return jsonify({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω deal_id"}), 400

    # üß† –ï—Å–ª–∏ folder_id –Ω–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ crm.deal.get
    if not folder_id or not folder_id.isdigit():
        logging.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ObjectId –ø–∞–ø–∫–∏ –∏–∑ —Å–¥–µ–ª–∫–∏")
        folder_id = get_folder_id_from_deal(deal_id, "UF_CRM_1743235503935")  # –ø–æ–ª–µ "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É / —É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–æ–≤"

    if not folder_id:
        return jsonify({"status": "error", "message": "folder_id –Ω–µ –ø–æ–ª—É—á–µ–Ω"}), 400

    try:
        resp = requests.post(f"{BITRIX_WEBHOOK_URL}disk.folder.getchildren", json={"id": folder_id})
        result_json = resp.json()
        files_info = [f for f in result_json.get("result", []) if f.get("TYPE") == 2]
        logging.info(f"üìÇ –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {len(files_info)}")
    except Exception as e:
        logging.exception("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"}), 500

    if not files_info:
        return jsonify({"status": "error", "message": "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"}), 404

    file_ids_for_deal = []

    for file_info in files_info:
        download_url = file_info.get("DOWNLOAD_URL")
        if not download_url:
            continue

        file_url = f"https://vas-dom.bitrix24.ru{download_url}"
        file_name = os.path.basename(urlparse(file_url).path)
        file_content = download_file(file_url)

        if file_content:
            file_id = upload_file_to_bitrix(file_content, file_name)
            if file_id:
                file_ids_for_deal.append(file_id)
                logging.info(f"‚úÖ –§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω. ID={file_id}")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_name}")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {file_name}")

    if not file_ids_for_deal:
        return jsonify({"status": "error", "message": "–§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã"}), 500

    success = attach_files_to_deal(deal_id, file_ids_for_deal)
    logging.info(f"üìå –§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")

    return jsonify({
        "status": "ok" if success else "error",
        "folder_id": folder_id,
        "deal_id": deal_id,
        "files_attached": len(file_ids_for_deal),
        "attach_success": success
    }), 200 if success else 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000, debug=False)
