import os
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
from urllib.parse import urlparse

load_dotenv()

logging.basicConfig(
    filename="app.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    encoding="utf-8"
)

app = Flask(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL", "").strip()
BITRIX_DEAL_UPDATE_URL = os.getenv("BITRIX_DEAL_UPDATE_URL", "").strip()
BASIC_AUTH_LOGIN = os.getenv("BASIC_AUTH_LOGIN", "").strip()
BASIC_AUTH_PASSWORD = os.getenv("BASIC_AUTH_PASSWORD", "").strip()

CUSTOM_FILE_FIELD = "UF_CRM_1740994275251"  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤

@app.route("/", methods=["GET"])
def index():
    return "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200

def download_file(url):
    try:
        logging.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {url}")
        r = requests.get(url, auth=HTTPBasicAuth(BASIC_AUTH_LOGIN, BASIC_AUTH_PASSWORD))
        if r.status_code == 200:
            return r.content
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ({url}): —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
    except Exception as ex:
        logging.exception(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {ex}")
        return None

def upload_file_to_bitrix(file_content, file_name, storage_id=3):
    try:
        upload_url = f"{BITRIX_WEBHOOK_URL}disk.storage.uploadfile"
        files_data = {
            "id": (None, str(storage_id)),
            "fileContent": (file_name, file_content),
        }
        resp = requests.post(upload_url, files=files_data)
        data = resp.json()
        logging.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç disk.storage.uploadfile: {data}")

        if "result" in data and "ID" in data["result"]:
            return data["result"]["ID"]
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {data}")
            return None
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Bitrix: {e}")
        return None

def attach_files_to_deal(deal_id, file_ids):
    try:
        payload = {
            "id": deal_id,
            "fields": {CUSTOM_FILE_FIELD: file_ids}
        }
        resp = requests.post(BITRIX_DEAL_UPDATE_URL, json=payload)
        data = resp.json()
        logging.info(f"üîó –û—Ç–≤–µ—Ç –æ—Ç crm.deal.update: {data}")
        return data.get("result", False)
    except Exception as e:
        logging.exception("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")
        return False

@app.route("/attach_files", methods=["POST"])
def attach_files():
    if request.content_type != "application/json":
        logging.error("‚ùå Content-Type –Ω–µ application/json")
        return jsonify({"status": "error", "message": "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json"}), 400

    try:
        data = request.get_json(force=True)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}")
        return jsonify({"status": "error", "message": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"}), 400

    folder_id = str(data.get("folder_id", "")).strip()
    deal_id = str(data.get("deal_id", "")).strip()

    logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: folder_id={folder_id}, deal_id={deal_id}")

    if not folder_id or not deal_id:
        logging.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã folder_id –∏–ª–∏ deal_id")
        return jsonify({"status": "error", "message": "folder_id –∏ deal_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    try:
        resp = requests.post(f"{BITRIX_WEBHOOK_URL}disk.folder.getchildren", json={"id": folder_id})
        resp.raise_for_status()
        files_info = [f for f in resp.json().get("result", []) if f.get("TYPE") == 2]
        logging.info(f"üìÇ –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {len(files_info)}")
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏"}), 500

    if not files_info:
        logging.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {folder_id} –ø—É—Å—Ç–∞")
        return jsonify({"status": "error", "message": "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"}), 404

    file_ids_for_deal = []

    for file_info in files_info:
        file_url = f"https://vas-dom.bitrix24.ru{file_info.get('DOWNLOAD_URL')}"
        file_name = os.path.basename(urlparse(file_url).path)
        content = download_file(file_url)

        if content:
            file_id = upload_file_to_bitrix(content, file_name)
            if file_id:
                file_ids_for_deal.append(file_id)
                logging.info(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ —Å–¥–µ–ª–∫–µ (ID {file_id})")
            else:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª: {file_name}")
        else:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {file_name}")

    if not file_ids_for_deal:
        return jsonify({"status": "error", "message": "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 500

    result = attach_files_to_deal(deal_id, file_ids_for_deal)
    if not result:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ")
        return jsonify({"status": "error", "message": "–§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ"}), 500

    return jsonify({
        "status": "ok",
        "folder_id": folder_id,
        "deal_id": deal_id,
        "files_attached": len(file_ids_for_deal),
        "attach_success": True
    }), 200

# ‚ùó –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ app.run ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º gunicorn
if __name__ == "__main__":
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π Gunicorn –¥–ª—è –∑–∞–ø—É—Å–∫–∞: gunicorn -w 1 app:app")
