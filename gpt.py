from openai import AsyncOpenAI
from config import OPENAI_API_KEY
from bitrix import get_address_from_deal
from loguru import logger

client = AsyncOpenAI(api_key=OPENAI_API_KEY)


async def generate_caption(deal_id: int) -> str:
    try:
        address = await get_address_from_deal(deal_id)
        prompt = f"""
–í—ã ‚Äî –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —É–±–æ—Ä–∫–µ –ø–æ–¥—ä–µ–∑–¥–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –∫ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç—É –æ–± —É–±–æ—Ä–∫–µ. 
–ê–¥—Ä–µ—Å: {address}
–£–ø–æ–º—è–Ω–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –Ω–∞–º—ë–∫ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –î–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏.
"""

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–±–æ—Ä–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.9
        )

        text = response.choices[0].message.content.strip()
        logger.info("üß† GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç")
        return text

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return ""