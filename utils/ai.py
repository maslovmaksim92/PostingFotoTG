import httpx
from loguru import logger
from config import settings

BASE_PROMPT = """
–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–π —É–±–æ—Ä–∫—É. 
–§–æ—Ä–º–∞—Ç:
- –º–∞–∫—Å–∏–º—É–º 2‚Äì3 —Å—Ç—Ä–æ–∫–∏
- –º–æ–∂–Ω–æ –≤ —Å—Ç–∏—Ö–∞—Ö
- –º–æ–∂–Ω–æ —Å —à—É—Ç–∫–æ–π
- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 1 —ç–º–æ—Ü–∏—è –∏ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –¥–æ–±–∞–≤—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø—Ä–∏–∑—ã–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–±–µ–∑ URL)
- –≤ –∫–æ–Ω—Ü–µ –º–∏–Ω–∏–º—É–º 3 emoji

–ü–∏—à–∏ –∂–∏–≤–æ, —Ç–µ–ø–ª–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –ë–µ–∑ —Ö—ç—à—Ç–µ–≥–æ–≤. –ü—Ä–∏–º–µ—Ä: "–í –ø–æ–¥—ä–µ–∑–¥–µ —Å–≤–µ–∂–æ –∫–∞–∫ –≤–µ—Å–Ω–∞ üåø –°–ø–∞—Å–∏–±–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∑–∞ —á–∏—Å—Ç–æ—Ç—É! üí™ –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –¥–æ–±—Ä—ã–º —Å–ª–æ–≤–æ–º ‚ú®"
"""


async def generate_gpt_text(address: str = "", date: str = "", types: list[str] = None) -> str:
    types = types or []
    context = f"–£–±–æ—Ä–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {address}. –î–∞—Ç–∞: {date}. –¢–∏–ø—ã: {', '.join(types)}."
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={"Authorization": f"Bearer {settings.OPENAI_API_KEY}"},
                json={
                    "model": "gpt-3.5-turbo",
                    "messages": [
                        {"role": "system", "content": BASE_PROMPT},
                        {"role": "user", "content": context}
                    ],
                    "temperature": 0.9,
                    "max_tokens": 120
                }
            )
            response.raise_for_status()
            data = response.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.warning(f"GPT error: {e}")
        raise