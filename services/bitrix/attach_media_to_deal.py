from services.optimize_upload import filter_valid_files

# –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥...

def attach_media_to_deal(deal_id: int, files: List[Dict]) -> List[int]:
    logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ —Å–¥–µ–ª–∫–µ {deal_id} (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ uploadUrl)")

    # ‚ú® –ù–æ–≤—ã–π —à–∞–≥: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    files = filter_valid_files(files)

    file_ids = []
    fields = get_deal_fields(deal_id)
    folder_id = fields.get(FOLDER_FIELD_CODE)

    for file in files:
        name = file["name"][:50].replace(" ", "_")
        download_url = file["download_url"]
        logger.debug(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª: {name} –∏–∑ {download_url}")

        try:
            r = requests.get(download_url)
            r.raise_for_status()
            file_bytes = r.content

            # –®–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∞–µ–º uploadUrl –æ—Ç Bitrix
            init_url = f"{BITRIX_WEBHOOK}/disk.folder.uploadfile"
            init_resp = requests.post(init_url, files={
                "id": (None, str(folder_id)),
                "data[NAME]": (None, name),
                "data[CREATED_BY]": (None, "1"),
                "generateUniqueName": (None, "Y")
            })
            init_resp.raise_for_status()
            logger.debug(f"üì§ –û—Ç–≤–µ—Ç init: {init_resp.text}")
            upload_url = init_resp.json().get("result", {}).get("uploadUrl")

            if not upload_url:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å uploadUrl –¥–ª—è {name}")
                continue

            # –®–∞–≥ 2 ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            upload_resp = requests.post(upload_url, files={
                "file": (name, file_bytes, "application/octet-stream")
            })
            upload_resp.raise_for_status()
            logger.debug(f"üì• –û—Ç–≤–µ—Ç upload {name}: {upload_resp.text}")

            upload_data = upload_resp.json()
            file_id = (
                upload_data.get("result", {}).get("ID") or
                upload_data.get("result", {}).get("file", {}).get("ID") or
                upload_data.get("ID") or
                upload_data.get("result")
            )

            if isinstance(file_id, int) or str(file_id).isdigit():
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {name} ‚Üí ID {file_id}")
                file_ids.append(int(file_id))
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç ID –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {name}: {e}")

    if file_ids:
        payload = {"id": deal_id, "fields": {PHOTO_FIELD_CODE: file_ids}}
        update_url = f"{BITRIX_WEBHOOK}/crm.deal.update"
        logger.debug(f"‚û°Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É {deal_id}: {payload}")
        try:
            update_resp = requests.post(update_url, json=payload)
            update_resp.raise_for_status()
            logger.info(f"üìé –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {file_ids}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")

    return file_ids