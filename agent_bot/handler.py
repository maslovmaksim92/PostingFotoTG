import os
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from agent_bot.prompts import get_answer
from agent_bot.form import Form

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(
    token=os.getenv("AGENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –ö–Ω–æ–ø–∫–∏ ===
main_kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")],
        [KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
    ]
)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö–∞–ª—É–≥–µ.\n\n"
        "üè¢ *–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ 1089 –º¬≤ + –∑–µ–º–ª—è 815 –º¬≤*\n"
        "üí∞ *–¶–µ–Ω–∞*: 45,1 –º–ª–Ω ‚ÇΩ\n"
        "üìç *–ê–¥—Ä–µ—Å*: –ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@router.message(F.text == "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: Message):
    pdf_path = "agent_bot/templates/Presentation GAB Kaluga.pdf"
    await msg.answer("–í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞:")
    await msg.answer_document(FSInputFile(pdf_path))

@router.message(F.text == "üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
async def send_photos(msg: Message):
    folder = "agent_bot/images"
    if not os.path.exists(folder):
        await msg.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    photos = []
    for fname in os.listdir(folder):
        if fname.endswith((".jpg", ".png", ".jpeg")):
            path = os.path.join(folder, fname)
            photos.append(InputMediaPhoto(media=FSInputFile(path)))
    if photos:
        await msg.answer_media_group(photos[:10])
    else:
        await msg.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def prompt_question(msg: Message):
    await msg.answer("üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.")

@router.message(F.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def ask_name(msg: Message, state: FSMContext):
    await msg.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@router.message(Form.name)
async def ask_phone(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@router.message(Form.phone)
async def submit_request(msg: Message, state: FSMContext):
    data = await state.update_data(phone=msg.text)
    name = data["name"]
    phone = data["phone"]
    chat_id = int(os.getenv("LEADS_CHAT_ID", "-4640675641"))

    await bot.send_message(
        chat_id,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\nüë§ –ò–º—è: {name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_kb)
    await state.clear()

@router.message()
async def process_question(msg: Message):
    if not msg.text:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return
    answer = await get_answer(msg.text)
    await msg.answer(answer)

# === –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ FastAPI ===
router_polling = router