from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from agent_bot.prompts import get_answer
import os

bot = Bot(token=os.getenv("AGENT_BOT_TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())

main_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü"),
    KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
    KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"),
    KeyboardButton("üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"),
)

class Application(StatesGroup):
    waiting_name = State()
    waiting_phone = State()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö–∞–ª—É–≥–µ.\n\nüè¢ *–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ 1089 –º¬≤ + –∑–µ–º–ª—è 815 –º¬≤*\nüí∞ *–¶–µ–Ω–∞*: 45,1 –º–ª–Ω ‚ÇΩ\nüìç *–ê–¥—Ä–µ—Å*: –ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞",
        reply_markup=main_kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda msg: msg.text == "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: types.Message):
    await bot.send_message(msg.chat.id, "–í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:")
    await bot.send_document(msg.chat.id, types.InputFile("agent_bot/templates/presentation.pdf"))

@dp.message_handler(lambda msg: msg.text == "üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ")
async def send_photos(msg: types.Message):
    files = os.listdir("agent_bot/templates/images")
    media = [types.InputMediaPhoto(open(f"agent_bot/templates/images/{f}", "rb")) for f in files[:10]]
    await bot.send_media_group(msg.chat.id, media)

@dp.message_handler(lambda msg: msg.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(msg: types.Message):
    await msg.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    dp.register_message_handler(handle_question, state=None)

async def handle_question(msg: types.Message):
    answer = await get_answer(msg.text)
    await msg.answer(answer)
    dp.unregister_message_handler(handle_question, state=None)

@dp.message_handler(lambda msg: msg.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    await Application.waiting_name.set()

@dp.message_handler(state=Application.waiting_name)
async def get_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await Application.waiting_phone.set()

@dp.message_handler(state=Application.waiting_phone)
async def get_phone(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    phone = msg.text
    await bot.send_message(os.getenv("TG_CHAT_ID"), f"üì• –ó–∞—è–≤–∫–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.finish()

async def start_agent_bot():
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
