import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto
from agent_bot.prompts import get_answer
from loguru import logger
from pathlib import Path

bot = Bot(
    token=os.getenv("AGENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

router_polling = Router()

main_kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")],
        [KeyboardButton(text="üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")],
        [KeyboardButton(text="üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
    ]
)

user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ

@router_polling.message(F.text.lower() == "/start")
async def start_handler(msg: Message):
    logger.info(f"‚ñ∂Ô∏è /start –æ—Ç {msg.from_user.id}")
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö–∞–ª—É–≥–µ.\n\n"
        "üè¢ *–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ 1089 –º¬≤ + –∑–µ–º–ª—è 815 –º¬≤*\n"
        "üí∞ *–¶–µ–Ω–∞*: 45,1 –º–ª–Ω ‚ÇΩ\n"
        "üìç *–ê–¥—Ä–µ—Å*: –ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@router_polling.message(F.text == "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: Message):
    logger.info(f"üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ö–ü")
    docs = sorted(Path("agent_bot/templates").glob("*.pdf"))

    doc_titles = {
        "Presentation GAB Kaluga.pdf": "üìä –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "egrn.pdf": "üìÑ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù",
        "resume.pdf": "üìã –†–µ–∑—é–º–µ –æ–±—ä–µ–∫—Ç–∞",
        "svod_pravil_308.pdf": "üìò –°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª",
        "tex_plan.pdf": "üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω"
    }

    if not docs:
        await msg.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    await msg.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É:")

    for doc in docs:
        name = doc.name
        caption = doc_titles.get(name, f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {name}")
        await msg.answer_document(FSInputFile(doc), caption=caption)

@router_polling.message(F.text == "üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
async def send_photos(msg: Message):
    logger.info(f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ç–æ")
    folder = "agent_bot/images"
    if not os.path.exists(folder):
        await msg.answer("‚ùå –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    photos = []
    for fname in sorted(os.listdir(folder)):
        if fname.lower().endswith((".jpg", ".png", ".jpeg")):
            file_path = os.path.join(folder, fname)
            photos.append(InputMediaPhoto(media=FSInputFile(file_path)))

    if not photos:
        await msg.answer("üìÇ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for i in range(0, len(photos), 10):
        await msg.answer_media_group(photos[i:i+10])

@router_polling.message(F.text == "üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã")
async def send_documents(msg: Message):
    logger.info(f"üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    docs = sorted(Path("agent_bot/templates").glob("*.pdf"))
    if not docs:
        await msg.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for doc in docs:
        await msg.answer_document(FSInputFile(doc))

@router_polling.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(msg: Message):
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –∑–∞—è–≤–∫—É")
    user_states[msg.from_user.id] = {"step": "name"}
    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û*:")

@router_polling.message(F.text)
async def process_form_or_question(msg: Message):
    user_id = msg.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
    if user_id in user_states:
        state = user_states[user_id]

        if state["step"] == "name":
            state["name"] = msg.text.strip()
            state["step"] = "phone"
            await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:")
            return

        elif state["step"] == "phone":
            state["phone"] = msg.text.strip()
            state["step"] = "done"

            text = (
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
                f"üë§ –§–ò–û: {state['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}\n"
                f"üÜî Telegram ID: {user_id}\n"
                f"üë§ Username: @{msg.from_user.username or '–Ω–µ—Ç'}"
            )

            await bot.send_message(chat_id=os.getenv("TG_CHAT_LEAD"), text=text)
            await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
            user_states.pop(user_id, None)
            return

    # GPT-–æ—Ç–≤–µ—Ç—ã –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
    if not msg.text:
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    logger.info(f"üß† –í–æ–ø—Ä–æ—Å –æ—Ç {msg.from_user.id}: {msg.text}")
    answer = await get_answer(msg.text, user_id=user_id)
    await msg.answer(answer)
