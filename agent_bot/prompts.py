from openai import AsyncOpenAI
import os

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

FAQ = {
    "ะพะฑัะตะผะตะฝะตะฝะธั": "ะะฑัะตะผะตะฝะตะฝะธะน ะฝะตั. ะะฑัะตะบั ะฒ ัะพะฑััะฒะตะฝะฝะพััะธ ะะะ ยซะะฐั ะะพะผยป.",
    "ะฐัะตะฝะดะฐ": "ะั ะณะพัะพะฒั ะพััะฐัััั ะฐัะตะฝะดะฐัะพัะฐะผะธ ะฝะฐ 3 ะณะพะดะฐ ะฟะพ ััะฐะฒะบะต 120 000 โฝ/ะผะตั.",
    "ะฟะปะพัะฐะดั": "ะะปะพัะฐะดั ะทะดะฐะฝะธั โ 1089,7 ะผยฒ, ััะฐััะพะบ โ 815 ะผยฒ.",
    "ะฐะดัะตั": "ะณ. ะะฐะปัะณะฐ, ะฟะตั. ะกะตะปััะบะธะน, ะด. 8ะฐ.",
    "ัะตะฝะฐ": "ะกัะพะธะผะพััั ะพะฑัะตะบัะฐ โ 45,1 ะผะปะฝ โฝ.",
}

async def get_answer(question: str) -> str:
    for key, value in FAQ.items():
        if key in question.lower():
            return value

    prompt = f"""
ะะพั ะดะฐะฝะฝัะต ะฟะพ ะพะฑัะตะบัั:

๐ ะะดัะตั: ะะฐะปัะณะฐ, ะฟะตั. ะกะตะปััะบะธะน, 8ะฐ  
๐ข ะะปะพัะฐะดั: 1089,7 ะผยฒ  
๐ชง ะะตะผะปั: 815 ะผยฒ  
๐ฐ ะฆะตะฝะฐ: 45,1 ะผะปะฝ โฝ  
๐ ะะฑัะตะผะตะฝะตะฝะธั: ะฝะตั  
๐ ะะะฃ: ะพััััััะฒัะตั  
๐ ะั ะณะพัะพะฒั ะพััะฐัััั ะฐัะตะฝะดะฐัะพัะฐะผะธ ะฝะฐ 3 ะณะพะดะฐ (120 ััั./ะผะตั)

ะะพะฟัะพั ะฐะณะตะฝัะฐ: "{question}"
ะัะฒะตัั ะบะฐะบ ะฐะณะตะฝั ะฟะพ ะฝะตะดะฒะธะถะธะผะพััะธ.
"""

    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5
    )
    return response.choices[0].message.content.strip()
