### üìÑ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ PostingFotoTG

> –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å GitHub (main)

---

#### ‚úÖ 1. `bitrix.py`
```python
import os
import httpx
import asyncio
from typing import List, Dict
from loguru import logger
from dotenv import load_dotenv

load_dotenv()

BITRIX_WEBHOOK = os.getenv("BITRIX_WEBHOOK")
PHOTO_FIELD_CODE = os.getenv("FILE_FIELD_ID") or "UF_CRM_1740994275251"
FOLDER_FIELD_CODE = os.getenv("FOLDER_FIELD_ID") or "UF_CRM_1743273170850"
ADDRESS_FIELD_CODE = "UF_CRM_1669561599956"
FILE_LINKS_FIELD_CODE = "UF_CRM_1745671890168"

async def call_bitrix_method(method: str, params: dict = None) -> dict:
    url = f"{BITRIX_WEBHOOK}/{method}"
    async with httpx.AsyncClient(timeout=30) as client:
        response = await client.post(url, json=params or {})
        response.raise_for_status()
        return response.json()

async def get_deal_fields(deal_id: int) -> Dict:
    response = await call_bitrix_method("crm.deal.get", {"ID": deal_id})
    return response.get("result", {})

async def get_address_from_deal(deal_id: int) -> str:
    fields = await get_deal_fields(deal_id)
    raw = fields.get(ADDRESS_FIELD_CODE, "")
    address = raw.split("|")[0] if "|" in raw else raw
    return address.replace(",", "").replace("|", "").replace("\\", "").strip()

async def get_files_from_folder(folder_id: int) -> List[Dict]:
    response = await call_bitrix_method("disk.folder.getchildren", {"id": folder_id})
    result = response.get("result", [])
    logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id}: {len(result)} —Ñ–∞–π–ª–æ–≤")
    return [
        {
            "id": item["ID"],
            "name": item["NAME"],
            "size": item.get("SIZE", 0),
            "download_url": item.get("DOWNLOAD_URL")
        }
        for item in result if item["TYPE"] == "file"
    ]

async def attach_media_to_deal(deal_id: int, files: List[Dict]) -> List[int]:
    logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID –∫ —Å–¥–µ–ª–∫–µ {deal_id}")
    if not files:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤ —Å–¥–µ–ª–∫–µ {deal_id}")
        return []

    file_ids = [int(file["id"]) for file in files if file.get("id")]
    if not file_ids:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö ID —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ {deal_id}")
        return []

    payload = {"id": deal_id, "fields": {PHOTO_FIELD_CODE: file_ids}}
    await call_bitrix_method("crm.deal.update", payload)
    return file_ids

async def check_files_attached(deal_id: int) -> bool:
    try:
        deal = await get_deal_fields(deal_id)
        attached = deal.get(PHOTO_FIELD_CODE, [])
        logger.debug(f"üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Å–¥–µ–ª–∫–µ {deal_id}: {attached}")
        return bool(attached)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        return False

async def update_file_links_in_deal(deal_id: int, links: List[str]):
    if not links:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–¥–µ–ª–∫–µ {deal_id}")
        return
    payload = {"id": deal_id, "fields": {FILE_LINKS_FIELD_CODE: links}}
    await call_bitrix_method("crm.deal.update", payload)
    logger.success(f"‚úÖ –°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–¥–µ–ª–∫—É {deal_id}")
```

---

#### ‚úÖ 2. `services.py`
```python
from bitrix import get_files_from_folder, attach_media_to_deal, update_file_links_in_deal, check_files_attached
from telegram import send_media_group
from loguru import logger
import asyncio

async def upload_folder_to_deal(deal_id: int, folder_id: int):
    try:
        files = await get_files_from_folder(folder_id)
        if not files:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
            return

        attached_ids = await attach_media_to_deal(deal_id, files)
        if attached_ids:
            logger.info(f"üíé –§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –ø–æ ID: {attached_ids}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏—Å—å –ø–æ ID")

        await asyncio.sleep(2)
        if not await check_files_attached(deal_id):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä...")
            await asyncio.sleep(2)
            await attach_media_to_deal(deal_id, files)

        photo_urls = [f.get("download_url").replace("&auth=", "?auth=") for f in files if f.get("download_url")]
        if not photo_urls:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
            return

        await send_media_group(photo_urls, "")
        await update_file_links_in_deal(deal_id, photo_urls)
        logger.success(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
```

---

#### ‚úÖ 3. `webhook.py`
```python
import time
from fastapi import APIRouter, Request
from loguru import logger
from bitrix import get_deal_fields
from services import upload_folder_to_deal

router = APIRouter()
last_processed = {}

@router.post("/webhook/deal_update")
async def deal_update(request: Request):
    try:
        data = await request.form()
        logger.warning("üêû [deal_update] –°—ã—Ä–æ–π payload: {}", dict(data))

        deal_id = data.get("data[FIELDS][ID]")
        if not deal_id:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç deal_id –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞")
            return {"status": "error", "message": "Deal ID not provided"}

        now = time.time()
        if deal_id in last_processed and now - last_processed[deal_id] < 30:
            logger.warning("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", deal_id)
            return {"status": "skipped", "reason": "duplicate request"}

        last_processed[deal_id] = now
        fields = await get_deal_fields(int(deal_id))
        folder_id = fields.get("UF_CRM_1743273170850")

        if not folder_id:
            logger.error("‚ùó –ù–µ—Ç –ø–∞–ø–∫–∏ —É —Å–¥–µ–ª–∫–∏ {}", deal_id)
            return {"status": "error", "message": "Folder ID not found in deal"}

        await upload_folder_to_deal(int(deal_id), int(folder_id))
        logger.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {}", deal_id)
        return {"status": "ok", "deal_id": deal_id}
    except Exception as e:
        logger.exception("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏")
        return {"status": "error", "message": f"Internal server error: {str(e)}"}
```

---

#### ‚úÖ 4. `telegram.py`
```python
import os
import httpx
from loguru import logger
from dotenv import load_dotenv
from datetime import datetime
from babel.dates import format_date

load_dotenv()

TG_CHAT_ID = os.getenv("TG_CHAT_ID")
TG_BOT_TOKEN = os.getenv("TG_GITHUB_BOT")

async def send_media_group(photos, address: str):
    if not address:
        logger.warning("üì≠ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        address = "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"

    today = datetime.now()
    russian_date = format_date(today, format='d MMMM y', locale='ru')
    caption = (
        f"üßπ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üìÖ –î–∞—Ç–∞: {russian_date}"
    )

    media = [
        {
            "type": "photo",
            "media": url,
            "caption": caption if idx == 0 else "",
            "parse_mode": "HTML"
        }
        for idx, url in enumerate(photos)
    ]

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            resp = await client.post(
                f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMediaGroup",
                json={"chat_id": TG_CHAT_ID, "media": media}
            )
            if resp.status_code == 200:
                logger.success(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram ({len(photos)} —à—Ç)")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {resp.text}")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
```

---

#### ‚úÖ 5. `app.py`
```python
from fastapi import FastAPI
from webhook import router as webhook_router
from loguru import logger

app = FastAPI()
app.include_router(webhook_router)
logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–æ")
```

---

üìå –í—Å—ë –≥–æ—Ç–æ–≤–æ. –≠—Ç–∏ –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞ **—Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –Ω–æ–≤–æ–≥–æ –ê–¢** –∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
