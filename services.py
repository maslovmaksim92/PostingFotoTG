from bitrix import get_files_from_folder, attach_media_to_deal
from telegram import send_media_group
from gpt import generate_caption
from utils import fallback_text
from loguru import logger
import httpx
import io


async def send_report(deal_id: int, folder_id: int):
    logger.info(f"üì¶ –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
    
    files = await get_files_from_folder(folder_id)
    if not files:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}, –ø–∞–ø–∫–∞ {folder_id}")
        return

    media_group = []
    for file in files:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(file["url"])
                response.raise_for_status()
                media_group.append({
                    "file": io.BytesIO(response.content),
                    "filename": file["name"]
                })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file['name']}: {e}")

    if not media_group:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏–º –∫ —Å–¥–µ–ª–∫–µ
    raw_files = [f["file"].getvalue() for f in media_group]
    bitrix_ready = [
        {"file": io.BytesIO(content), "filename": f["filename"]}
        for content, f in zip(raw_files, media_group)
    ]
    await attach_media_to_deal(deal_id, bitrix_ready)

    # –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏–º –≤ Telegram
    caption = await generate_caption(deal_id)
    if not caption:
        caption = fallback_text()

    await send_media_group(media_group, caption)

    logger.info(f"‚úÖ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ {deal_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω")